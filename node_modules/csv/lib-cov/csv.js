/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['csv.js']) {
  _$jscoverage['csv.js'] = [];
  _$jscoverage['csv.js'][4] = 0;
  _$jscoverage['csv.js'][8] = 0;
  _$jscoverage['csv.js'][9] = 0;
  _$jscoverage['csv.js'][10] = 0;
  _$jscoverage['csv.js'][11] = 0;
  _$jscoverage['csv.js'][13] = 0;
  _$jscoverage['csv.js'][16] = 0;
  _$jscoverage['csv.js'][17] = 0;
  _$jscoverage['csv.js'][30] = 0;
  _$jscoverage['csv.js'][32] = 0;
  _$jscoverage['csv.js'][40] = 0;
  _$jscoverage['csv.js'][45] = 0;
  _$jscoverage['csv.js'][49] = 0;
  _$jscoverage['csv.js'][50] = 0;
  _$jscoverage['csv.js'][51] = 0;
  _$jscoverage['csv.js'][52] = 0;
  _$jscoverage['csv.js'][54] = 0;
  _$jscoverage['csv.js'][55] = 0;
  _$jscoverage['csv.js'][56] = 0;
  _$jscoverage['csv.js'][57] = 0;
  _$jscoverage['csv.js'][58] = 0;
  _$jscoverage['csv.js'][59] = 0;
  _$jscoverage['csv.js'][62] = 0;
  _$jscoverage['csv.js'][63] = 0;
  _$jscoverage['csv.js'][64] = 0;
  _$jscoverage['csv.js'][66] = 0;
  _$jscoverage['csv.js'][67] = 0;
  _$jscoverage['csv.js'][72] = 0;
  _$jscoverage['csv.js'][73] = 0;
  _$jscoverage['csv.js'][75] = 0;
  _$jscoverage['csv.js'][76] = 0;
  _$jscoverage['csv.js'][77] = 0;
  _$jscoverage['csv.js'][78] = 0;
  _$jscoverage['csv.js'][80] = 0;
  _$jscoverage['csv.js'][81] = 0;
  _$jscoverage['csv.js'][82] = 0;
  _$jscoverage['csv.js'][83] = 0;
  _$jscoverage['csv.js'][84] = 0;
  _$jscoverage['csv.js'][89] = 0;
  _$jscoverage['csv.js'][90] = 0;
  _$jscoverage['csv.js'][91] = 0;
  _$jscoverage['csv.js'][93] = 0;
  _$jscoverage['csv.js'][94] = 0;
  _$jscoverage['csv.js'][96] = 0;
  _$jscoverage['csv.js'][97] = 0;
  _$jscoverage['csv.js'][98] = 0;
  _$jscoverage['csv.js'][100] = 0;
  _$jscoverage['csv.js'][101] = 0;
  _$jscoverage['csv.js'][103] = 0;
  _$jscoverage['csv.js'][104] = 0;
  _$jscoverage['csv.js'][106] = 0;
  _$jscoverage['csv.js'][107] = 0;
  _$jscoverage['csv.js'][109] = 0;
  _$jscoverage['csv.js'][110] = 0;
  _$jscoverage['csv.js'][112] = 0;
  _$jscoverage['csv.js'][113] = 0;
  _$jscoverage['csv.js'][115] = 0;
  _$jscoverage['csv.js'][117] = 0;
  _$jscoverage['csv.js'][118] = 0;
  _$jscoverage['csv.js'][122] = 0;
  _$jscoverage['csv.js'][123] = 0;
  _$jscoverage['csv.js'][128] = 0;
  _$jscoverage['csv.js'][129] = 0;
  _$jscoverage['csv.js'][130] = 0;
  _$jscoverage['csv.js'][133] = 0;
  _$jscoverage['csv.js'][135] = 0;
  _$jscoverage['csv.js'][136] = 0;
  _$jscoverage['csv.js'][137] = 0;
  _$jscoverage['csv.js'][138] = 0;
  _$jscoverage['csv.js'][139] = 0;
  _$jscoverage['csv.js'][142] = 0;
  _$jscoverage['csv.js'][143] = 0;
  _$jscoverage['csv.js'][144] = 0;
  _$jscoverage['csv.js'][145] = 0;
  _$jscoverage['csv.js'][146] = 0;
  _$jscoverage['csv.js'][147] = 0;
  _$jscoverage['csv.js'][148] = 0;
  _$jscoverage['csv.js'][149] = 0;
  _$jscoverage['csv.js'][150] = 0;
  _$jscoverage['csv.js'][153] = 0;
  _$jscoverage['csv.js'][154] = 0;
  _$jscoverage['csv.js'][156] = 0;
  _$jscoverage['csv.js'][157] = 0;
  _$jscoverage['csv.js'][159] = 0;
  _$jscoverage['csv.js'][161] = 0;
  _$jscoverage['csv.js'][162] = 0;
  _$jscoverage['csv.js'][163] = 0;
  _$jscoverage['csv.js'][165] = 0;
  _$jscoverage['csv.js'][166] = 0;
  _$jscoverage['csv.js'][167] = 0;
  _$jscoverage['csv.js'][170] = 0;
  _$jscoverage['csv.js'][172] = 0;
  _$jscoverage['csv.js'][173] = 0;
  _$jscoverage['csv.js'][174] = 0;
  _$jscoverage['csv.js'][176] = 0;
  _$jscoverage['csv.js'][177] = 0;
  _$jscoverage['csv.js'][179] = 0;
  _$jscoverage['csv.js'][181] = 0;
  _$jscoverage['csv.js'][182] = 0;
  _$jscoverage['csv.js'][185] = 0;
  _$jscoverage['csv.js'][186] = 0;
  _$jscoverage['csv.js'][188] = 0;
  _$jscoverage['csv.js'][189] = 0;
  _$jscoverage['csv.js'][190] = 0;
  _$jscoverage['csv.js'][191] = 0;
  _$jscoverage['csv.js'][193] = 0;
  _$jscoverage['csv.js'][194] = 0;
  _$jscoverage['csv.js'][196] = 0;
  _$jscoverage['csv.js'][200] = 0;
  _$jscoverage['csv.js'][201] = 0;
  _$jscoverage['csv.js'][202] = 0;
  _$jscoverage['csv.js'][203] = 0;
  _$jscoverage['csv.js'][204] = 0;
  _$jscoverage['csv.js'][205] = 0;
  _$jscoverage['csv.js'][206] = 0;
  _$jscoverage['csv.js'][207] = 0;
  _$jscoverage['csv.js'][208] = 0;
  _$jscoverage['csv.js'][209] = 0;
  _$jscoverage['csv.js'][210] = 0;
  _$jscoverage['csv.js'][211] = 0;
  _$jscoverage['csv.js'][212] = 0;
  _$jscoverage['csv.js'][214] = 0;
  _$jscoverage['csv.js'][215] = 0;
  _$jscoverage['csv.js'][217] = 0;
  _$jscoverage['csv.js'][218] = 0;
  _$jscoverage['csv.js'][219] = 0;
  _$jscoverage['csv.js'][222] = 0;
  _$jscoverage['csv.js'][227] = 0;
  _$jscoverage['csv.js'][228] = 0;
  _$jscoverage['csv.js'][229] = 0;
  _$jscoverage['csv.js'][230] = 0;
  _$jscoverage['csv.js'][232] = 0;
  _$jscoverage['csv.js'][234] = 0;
  _$jscoverage['csv.js'][235] = 0;
  _$jscoverage['csv.js'][238] = 0;
}
_$jscoverage['csv.js'][4]++;
var EventEmitter = require("events").EventEmitter, fs = require("fs");
_$jscoverage['csv.js'][8]++;
var merge = (function (obj1, obj2) {
  _$jscoverage['csv.js'][9]++;
  var r = obj1 || {};
  _$jscoverage['csv.js'][10]++;
  for (var key in obj2) {
    _$jscoverage['csv.js'][11]++;
    r[key] = obj2[key];
}
  _$jscoverage['csv.js'][13]++;
  return r;
});
_$jscoverage['csv.js'][16]++;
module.exports = (function () {
  _$jscoverage['csv.js'][17]++;
  var state = {count: 0, field: "", line: [], lastC: "", quoted: false, commented: false, buffer: null, bufferPosition: 0};
  _$jscoverage['csv.js'][30]++;
  var CSV = (function () {
  _$jscoverage['csv.js'][32]++;
  this.readOptions = {flags: "r", encoding: "utf8", bufferSize: 8388608, separator: ",", escape: "\"", quote: "\""};
  _$jscoverage['csv.js'][40]++;
  this.writeOptions = {bufferSize: null, lineBreaks: null};
});
  _$jscoverage['csv.js'][45]++;
  CSV.prototype.__proto__ = EventEmitter.prototype;
  _$jscoverage['csv.js'][49]++;
  CSV.prototype.fromStream = (function (readStream, options) {
  _$jscoverage['csv.js'][50]++;
  if (! readStream instanceof EventEmitter) {
    _$jscoverage['csv.js'][50]++;
    throw new Error("Invalid stream");
  }
  _$jscoverage['csv.js'][51]++;
  if (options) {
    _$jscoverage['csv.js'][52]++;
    merge(this.readOptions, options);
  }
  _$jscoverage['csv.js'][54]++;
  var self = this;
  _$jscoverage['csv.js'][55]++;
  readStream.on("data", (function (data) {
  _$jscoverage['csv.js'][55]++;
  parse(data);
}));
  _$jscoverage['csv.js'][56]++;
  readStream.on("error", (function (error) {
  _$jscoverage['csv.js'][56]++;
  self.emit("error", error);
}));
  _$jscoverage['csv.js'][57]++;
  readStream.on("end", (function () {
  _$jscoverage['csv.js'][58]++;
  if (state.quoted) {
    _$jscoverage['csv.js'][59]++;
    self.emit("error", new Error("Quoted field not terminated"));
  }
  else {
    _$jscoverage['csv.js'][62]++;
    if (state.field) {
      _$jscoverage['csv.js'][63]++;
      state.line.push(state.field);
      _$jscoverage['csv.js'][64]++;
      state.field = "";
    }
    _$jscoverage['csv.js'][66]++;
    if (state.line.length > 0) {
      _$jscoverage['csv.js'][67]++;
      flush(true);
    }
  }
  _$jscoverage['csv.js'][72]++;
  self.writeStream.write(state.buffer.slice(0, state.bufferPosition));
  _$jscoverage['csv.js'][73]++;
  self.writeStream.end();
}));
  _$jscoverage['csv.js'][75]++;
  this.readStream = readStream;
  _$jscoverage['csv.js'][76]++;
  state.buffer = new Buffer(this.readOptions.bufferSize);
  _$jscoverage['csv.js'][77]++;
  state.bufferPosition = 0;
  _$jscoverage['csv.js'][78]++;
  return this;
});
  _$jscoverage['csv.js'][80]++;
  CSV.prototype.fromPath = (function (path, options) {
  _$jscoverage['csv.js'][81]++;
  merge(this.readOptions, options);
  _$jscoverage['csv.js'][82]++;
  var stream = fs.createReadStream(path, this.readOptions);
  _$jscoverage['csv.js'][83]++;
  stream.setEncoding(this.readOptions.encoding);
  _$jscoverage['csv.js'][84]++;
  return this.fromStream(stream, null);
});
  _$jscoverage['csv.js'][89]++;
  CSV.prototype.toStream = (function (writeStream, options) {
  _$jscoverage['csv.js'][90]++;
  if (! writeStream instanceof EventEmitter) {
    _$jscoverage['csv.js'][90]++;
    throw new Error("Invalid stream");
  }
  _$jscoverage['csv.js'][91]++;
  var self = this;
  _$jscoverage['csv.js'][93]++;
  writeStream.on("close", (function () {
  _$jscoverage['csv.js'][94]++;
  self.emit("end", state.count);
}));
  _$jscoverage['csv.js'][96]++;
  this.writeStream = writeStream;
  _$jscoverage['csv.js'][97]++;
  merge(this.writeOptions, options);
  _$jscoverage['csv.js'][98]++;
  switch (this.writeOptions.lineBreaks) {
  case "auto":
    _$jscoverage['csv.js'][100]++;
    this.writeOptions.lineBreaks = null;
    _$jscoverage['csv.js'][101]++;
    break;
  case "unix":
    _$jscoverage['csv.js'][103]++;
    this.writeOptions.lineBreaks = "\n";
    _$jscoverage['csv.js'][104]++;
    break;
  case "mac":
    _$jscoverage['csv.js'][106]++;
    this.writeOptions.lineBreaks = "\r";
    _$jscoverage['csv.js'][107]++;
    break;
  case "windows":
    _$jscoverage['csv.js'][109]++;
    this.writeOptions.lineBreaks = "\r\n";
    _$jscoverage['csv.js'][110]++;
    break;
  case "unicode":
    _$jscoverage['csv.js'][112]++;
    this.writeOptions.lineBreaks = "\u2028";
    _$jscoverage['csv.js'][113]++;
    break;
  }
  _$jscoverage['csv.js'][115]++;
  return this;
});
  _$jscoverage['csv.js'][117]++;
  CSV.prototype.toPath = (function (path, options) {
  _$jscoverage['csv.js'][118]++;
  merge(options, {flags: "w", encoding: "utf8"});
  _$jscoverage['csv.js'][122]++;
  var stream = fs.createWriteStream(path, options);
  _$jscoverage['csv.js'][123]++;
  return this.toStream(stream, options);
});
  _$jscoverage['csv.js'][128]++;
  CSV.prototype.transform = (function (callback) {
  _$jscoverage['csv.js'][129]++;
  this.transformer = callback;
  _$jscoverage['csv.js'][130]++;
  return this;
});
  _$jscoverage['csv.js'][133]++;
  var csv = new CSV();
  _$jscoverage['csv.js'][135]++;
  function parse(chars) {
    _$jscoverage['csv.js'][136]++;
    chars = "" + chars;
    _$jscoverage['csv.js'][137]++;
    for (var i = 0, l = chars.length; i < l; i++) {
      _$jscoverage['csv.js'][138]++;
      var c = chars.charAt(i);
      _$jscoverage['csv.js'][139]++;
      switch (c) {
      case csv.readOptions.escape:
      case csv.readOptions.quote:
        _$jscoverage['csv.js'][142]++;
        if (state.commented) {
          _$jscoverage['csv.js'][142]++;
          break;
        }
        _$jscoverage['csv.js'][143]++;
        var isEscape = false;
        _$jscoverage['csv.js'][144]++;
        if (c === csv.readOptions.escape) {
          _$jscoverage['csv.js'][145]++;
          var nextChar = chars.charAt(i + 1);
          _$jscoverage['csv.js'][146]++;
          if (nextChar === csv.readOptions.escape || nextChar === csv.readOptions.quote) {
            _$jscoverage['csv.js'][147]++;
            i++;
            _$jscoverage['csv.js'][148]++;
            isEscape = true;
            _$jscoverage['csv.js'][149]++;
            c = chars.charAt(i);
            _$jscoverage['csv.js'][150]++;
            state.field += c;
          }
        }
        _$jscoverage['csv.js'][153]++;
        if (! isEscape && (c === csv.readOptions.quote)) {
          _$jscoverage['csv.js'][154]++;
          if (state.field && ! state.quoted) {
            _$jscoverage['csv.js'][156]++;
            state.field += c;
            _$jscoverage['csv.js'][157]++;
            break;
          }
          _$jscoverage['csv.js'][159]++;
          if (state.quoted) {
            _$jscoverage['csv.js'][161]++;
            var nextChar = chars.charAt(i + 1);
            _$jscoverage['csv.js'][162]++;
            if (nextChar && nextChar != "\r" && nextChar != "\n" && nextChar !== csv.readOptions.separator) {
              _$jscoverage['csv.js'][163]++;
              throw new Error("Invalid closing quote; found \"" + nextChar + "\" instead of separator \"" + csv.readOptions.separator + "\"");
            }
            _$jscoverage['csv.js'][165]++;
            state.quoted = false;
          }
          else {
            _$jscoverage['csv.js'][166]++;
            if (state.field === "") {
              _$jscoverage['csv.js'][167]++;
              state.quoted = true;
            }
          }
        }
        _$jscoverage['csv.js'][170]++;
        break;
      case csv.readOptions.separator:
        _$jscoverage['csv.js'][172]++;
        if (state.commented) {
          _$jscoverage['csv.js'][172]++;
          break;
        }
        _$jscoverage['csv.js'][173]++;
        if (state.quoted) {
          _$jscoverage['csv.js'][174]++;
          state.field += c;
        }
        else {
          _$jscoverage['csv.js'][176]++;
          state.line.push(state.field);
          _$jscoverage['csv.js'][177]++;
          state.field = "";
        }
        _$jscoverage['csv.js'][179]++;
        break;
      case "\n":
        _$jscoverage['csv.js'][181]++;
        if (! csv.readOptions.quoted && state.lastC === "\r") {
          _$jscoverage['csv.js'][182]++;
          break;
        }
      case "\r":
        _$jscoverage['csv.js'][185]++;
        if (csv.writeOptions.lineBreaks === null) {
          _$jscoverage['csv.js'][186]++;
          csv.writeOptions.lineBreaks = c + (c === "\r" && chars.charAt(i + 1) === "\n"? "\n": "");
        }
        _$jscoverage['csv.js'][188]++;
        state.line.push(state.field);
        _$jscoverage['csv.js'][189]++;
        state.field = "";
        _$jscoverage['csv.js'][190]++;
        flush();
        _$jscoverage['csv.js'][191]++;
        break;
      default:
        _$jscoverage['csv.js'][193]++;
        if (state.commented) {
          _$jscoverage['csv.js'][193]++;
          break;
        }
        _$jscoverage['csv.js'][194]++;
        state.field += c;
      }
      _$jscoverage['csv.js'][196]++;
      state.lastC = c;
}
}
  _$jscoverage['csv.js'][200]++;
  function flush(close) {
    _$jscoverage['csv.js'][201]++;
    var line = csv.transformer? csv.transformer(state.line, state.count): state.line;
    _$jscoverage['csv.js'][202]++;
    state.count++;
    _$jscoverage['csv.js'][203]++;
    if (line !== null) {
      _$jscoverage['csv.js'][204]++;
      csv.emit("data", line);
      _$jscoverage['csv.js'][205]++;
      if (typeof line === "object") {
        _$jscoverage['csv.js'][206]++;
        if (line instanceof Array) {
          _$jscoverage['csv.js'][207]++;
          var newLine = "";
          _$jscoverage['csv.js'][208]++;
          line.forEach((function (field, i) {
  _$jscoverage['csv.js'][209]++;
  var containsSeparator = field.indexOf(csv.writeOptions.separator || csv.readOptions.separator) >= 0;
  _$jscoverage['csv.js'][210]++;
  var containsQuote = field.indexOf(csv.writeOptions.quote || csv.readOptions.quote) >= 0;
  _$jscoverage['csv.js'][211]++;
  if (containsQuote) {
    _$jscoverage['csv.js'][212]++;
    field = field.replace(csv.writeOptions.quote || csv.readOptions.quote, (csv.writeOptions.escape || csv.readOptions.escape) + (csv.writeOptions.quote || csv.readOptions.quote));
  }
  _$jscoverage['csv.js'][214]++;
  if (containsQuote || containsSeparator) {
    _$jscoverage['csv.js'][215]++;
    field = (csv.writeOptions.quote || csv.readOptions.quote) + field + (csv.writeOptions.quote || csv.readOptions.quote);
  }
  _$jscoverage['csv.js'][217]++;
  newLine += field;
  _$jscoverage['csv.js'][218]++;
  if (i !== line.length - 1) {
    _$jscoverage['csv.js'][219]++;
    newLine += (csv.writeOptions.separator || csv.readOptions.separator);
  }
}));
          _$jscoverage['csv.js'][222]++;
          line = newLine + csv.writeOptions.lineBreaks;
        }
        else {
        }
      }
      _$jscoverage['csv.js'][227]++;
      if (state.bufferPosition + Buffer.byteLength(line, "utf8") > csv.readOptions.bufferSize) {
        _$jscoverage['csv.js'][228]++;
        csv.writeStream.write(state.buffer.slice(0, state.bufferPosition));
        _$jscoverage['csv.js'][229]++;
        state.buffer = new Buffer(csv.readOptions.bufferSize);
        _$jscoverage['csv.js'][230]++;
        state.bufferPosition = 0;
      }
      _$jscoverage['csv.js'][232]++;
      state.bufferPosition += state.buffer.write(line, state.bufferPosition, "utf8");
    }
    _$jscoverage['csv.js'][234]++;
    state.line = [];
    _$jscoverage['csv.js'][235]++;
    state.lastC = "";
}
  _$jscoverage['csv.js'][238]++;
  return csv;
});
_$jscoverage['csv.js'].source = ["","// Module CSV - Copyright David Worms &lt;open@adaltas.com&gt; (MIT Licensed)","","var EventEmitter = require('events').EventEmitter,","\tfs = require('fs');","","// Utils function","var merge = function(obj1,obj2){","\tvar r = obj1||{};","\tfor(var key in obj2){","\t\tr[key] = obj2[key];","\t}","\treturn r;","}","","module.exports = function(){","\tvar state = {","\t\tcount: 0,","\t\tfield: '',","\t\tline: [],","\t\tlastC: '',","\t\tquoted: false,","\t\tcommented: false,","\t\tbuffer: null,","\t\tbufferPosition: 0","\t}","\t","\t// Defined Class","\t","\tvar CSV = function(){","\t\t// Set options","\t\tthis.readOptions = {","\t\t\tflags: 'r',","\t\t\tencoding: 'utf8',","\t\t\tbufferSize: 8 * 1024 * 1024,","\t\t\tseparator: ',',","\t\t\tescape: '\"',","\t\t\tquote: '\"'","\t\t};","\t\tthis.writeOptions = {","\t\t\tbufferSize: null,","\t\t\tlineBreaks: null","\t\t};","\t}","\tCSV.prototype.__proto__ = EventEmitter.prototype;","\t","\t// Reading API","\t","\tCSV.prototype.fromStream = function(readStream, options){","\t\tif(!readStream instanceof EventEmitter) throw new Error('Invalid stream');","\t\tif(options){","\t\t\tmerge(this.readOptions,options);","\t\t}","\t\tvar self = this;","\t\treadStream.on('data', function(data) { parse(data) });","\t\treadStream.on('error', function(error) { self.emit('error', error) });","\t\treadStream.on('end', function() {","\t\t\tif (state.quoted) {","\t\t\t\tself.emit('error', new Error('Quoted field not terminated'));","\t\t\t} else {","\t\t\t\t// dump open record","\t\t\t\tif (state.field) {","\t\t\t\t\tstate.line.push(state.field);","\t\t\t\t\tstate.field = '';","\t\t\t\t}","\t\t\t\tif (state.line.length &gt; 0) {","\t\t\t\t\tflush(true);","\t\t\t\t}","\t\t\t\t//self.writeStream.end();","\t\t\t\t//writer.end()","\t\t\t}","\t\t\tself.writeStream.write(state.buffer.slice(0, state.bufferPosition));","\t\t\tself.writeStream.end();","\t\t});","\t\tthis.readStream = readStream;","\t\tstate.buffer = new Buffer(this.readOptions.bufferSize);","\t\tstate.bufferPosition = 0;","\t\treturn this;","\t}","\tCSV.prototype.fromPath = function(path, options){","\t\tmerge(this.readOptions, options);","\t\tvar stream = fs.createReadStream(path, this.readOptions);","\t\tstream.setEncoding(this.readOptions.encoding);","\t\treturn this.fromStream(stream, null);","\t}","\t","\t// Writting API","\t","\tCSV.prototype.toStream = function(writeStream, options){","\t\tif(!writeStream instanceof EventEmitter) throw new Error('Invalid stream');","\t\tvar self = this;","\t\t//writeStream.on('drain', function(){  })","\t\twriteStream.on('close', function(){","\t\t\tself.emit('end',state.count);","\t\t})","\t\tthis.writeStream = writeStream;","\t\tmerge(this.writeOptions,options);","\t\tswitch(this.writeOptions.lineBreaks){","\t\t\tcase 'auto':","\t\t\t\tthis.writeOptions.lineBreaks = null;","\t\t\t\tbreak;","\t\t\tcase 'unix':","\t\t\t\tthis.writeOptions.lineBreaks = \"\\n\";","\t\t\t\tbreak;","\t\t\tcase 'mac':","\t\t\t\tthis.writeOptions.lineBreaks = \"\\r\";","\t\t\t\tbreak;","\t\t\tcase 'windows':","\t\t\t\tthis.writeOptions.lineBreaks = \"\\r\\n\";","\t\t\t\tbreak;","\t\t\tcase 'unicode':","\t\t\t\tthis.writeOptions.lineBreaks = \"\\u2028\";","\t\t\t\tbreak;","\t\t}","\t\treturn this;","\t}","\tCSV.prototype.toPath = function(path, options){","\t\tmerge(options, {","\t\t\tflags: 'w',","\t\t\tencoding: 'utf8'","\t\t});","\t\tvar stream = fs.createWriteStream(path, options);","\t\treturn this.toStream(stream, options);","\t}","\t","\t// Transform API","\t","\tCSV.prototype.transform = function(callback){","\t\tthis.transformer = callback;","\t\treturn this;","\t}","\t","\tvar csv = new CSV();","","\tfunction parse(chars){","\t\tchars = ''+chars;","\t\tfor (var i = 0, l = chars.length; i &lt; l; i++) {","\t\t\tvar c = chars.charAt(i);","\t\t\tswitch (c) {","\t\t\t\tcase csv.readOptions.escape:","\t\t\t\tcase csv.readOptions.quote:","\t\t\t\t\tif( state.commented ) break;","\t\t\t\t\tvar isEscape = false;","\t\t\t\t\tif (c === csv.readOptions.escape) {","\t\t\t\t\t\tvar nextChar = chars.charAt(i + 1);","\t\t\t\t\t\tif (nextChar === csv.readOptions.escape || nextChar === csv.readOptions.quote) {","\t\t\t\t\t\t\ti++;","\t\t\t\t\t\t\tisEscape = true;","\t\t\t\t\t\t\tc = chars.charAt(i);","\t\t\t\t\t\t\tstate.field += c;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tif (!isEscape &amp;&amp; (c === csv.readOptions.quote)) {","\t\t\t\t\t\tif (state.field &amp;&amp; !state.quoted) {","\t\t\t\t\t\t\t// Treat quote as a regular character","\t\t\t\t\t\t\tstate.field += c;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t\tif (state.quoted) {","\t\t\t\t\t\t\t// Make sure a closing quote is followed by a separator","\t\t\t\t\t\t\tvar nextChar = chars.charAt(i + 1);","\t\t\t\t\t\t\tif (nextChar &amp;&amp; nextChar != '\\r' &amp;&amp; nextChar != '\\n' &amp;&amp; nextChar !== csv.readOptions.separator) {","\t\t\t\t\t\t\t\tthrow new Error('Invalid closing quote; found \"' + nextChar + '\" instead of separator \"' + csv.readOptions.separator + '\"');","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tstate.quoted = false;","\t\t\t\t\t\t} else if (state.field === '') {","\t\t\t\t\t\t\tstate.quoted = true;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t\tcase csv.readOptions.separator:","\t\t\t\t\tif( state.commented ) break;","\t\t\t\t\tif( state.quoted ) {","\t\t\t\t\t\tstate.field += c;","\t\t\t\t\t}else{","\t\t\t\t\t\tstate.line.push(state.field);","\t\t\t\t\t\tstate.field = '';","\t\t\t\t\t}","\t\t\t\t\tbreak;","\t\t\t\tcase '\\n':","\t\t\t\t\tif( !csv.readOptions.quoted &amp;&amp; state.lastC === '\\r' ){","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\tcase '\\r':","\t\t\t\t\tif( csv.writeOptions.lineBreaks === null ){","\t\t\t\t\t\tcsv.writeOptions.lineBreaks = c + ( c === '\\r' &amp;&amp; chars.charAt(i+1) === '\\n' ? '\\n' : '' );","\t\t\t\t\t}","\t\t\t\t\tstate.line.push(state.field);","\t\t\t\t\tstate.field = '';","\t\t\t\t\tflush();","\t\t\t\t\tbreak;","\t\t\t\tdefault:","\t\t\t\t\tif (state.commented) break;","\t\t\t\t\tstate.field += c;","\t\t\t}","\t\t\tstate.lastC = c;","\t\t}","\t}","","\tfunction flush(close){","\t\tvar line = csv.transformer?csv.transformer(state.line,state.count):state.line;","\t\tstate.count++;","\t\tif(line !== null){","\t\t\tcsv.emit('data',line);","\t\t\tif(typeof line === 'object'){","\t\t\t\tif(line instanceof Array){","\t\t\t\t\tvar newLine = '';","\t\t\t\t\tline.forEach(function(field,i){","\t\t\t\t\t\tvar containsSeparator = field.indexOf(csv.writeOptions.separator||csv.readOptions.separator)&gt;=0;","\t\t\t\t\t\tvar containsQuote = field.indexOf(csv.writeOptions.quote||csv.readOptions.quote)&gt;=0;","\t\t\t\t\t\tif(containsQuote){","\t\t\t\t\t\t\tfield = field.replace(csv.writeOptions.quote||csv.readOptions.quote,(csv.writeOptions.escape||csv.readOptions.escape)+(csv.writeOptions.quote||csv.readOptions.quote));","\t\t\t\t\t\t}","\t\t\t\t\t\tif(containsQuote||containsSeparator){","\t\t\t\t\t\t\tfield = (csv.writeOptions.quote||csv.readOptions.quote)+field+(csv.writeOptions.quote||csv.readOptions.quote);","\t\t\t\t\t\t}","\t\t\t\t\t\tnewLine += field;","\t\t\t\t\t\tif(i!==line.length-1){","\t\t\t\t\t\t\tnewLine += (csv.writeOptions.separator||csv.readOptions.separator)","\t\t\t\t\t\t}","\t\t\t\t\t});","\t\t\t\t\tline = newLine+csv.writeOptions.lineBreaks;","\t\t\t\t}else{","\t\t\t\t\t","\t\t\t\t}","\t\t\t}","\t\t\tif(state.bufferPosition+Buffer.byteLength(line,'utf8')&gt;csv.readOptions.bufferSize){","\t\t\t\tcsv.writeStream.write(state.buffer.slice(0, state.bufferPosition));","\t\t\t\tstate.buffer = new Buffer(csv.readOptions.bufferSize);","\t\t\t\tstate.bufferPosition = 0;","\t\t\t}","\t\t\tstate.bufferPosition += state.buffer.write(line,state.bufferPosition,'utf8');","\t\t}","\t\tstate.line = [];","\t\tstate.lastC = '';","\t}","\t","\treturn csv;","};"];
